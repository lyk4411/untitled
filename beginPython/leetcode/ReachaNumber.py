class ReachaNumber(object):
    # 下面来说第二个 trick，这个是解题的关键，比如说目标值是4，那么如果我们一直累加步数，
    # 直到其正好大于等于target时，有：
    # 0 + 1 = 1
    # 1 + 2 = 3
    # 3 + 3 = 6
    # 第三步加上3，得到了6，超过了目标值4，超过了的距离为2，是偶数，那么实际上我们只要将加上距
    # 离为1的时候，不加1，而是加 -1，那么此时累加和就损失了2，那么正好能到目标值4，如下：
    # 0 - 1 = -1
    # -1 + 2 = 1
    # 1 + 3 = 4
    # 那么，我们的第二个 trick 就是，当超过目标值的差值d为偶数时，只要将第 d/2 步的距离取反，
    # 就能得到目标值，此时的步数即为到达目标值的步数。那么，如果d为奇数时，且当前为第n步，
    # 那么我们看下一步 n+1 的奇偶，如果 n+1 为奇数，那么加上 n+1 再做差，得到的差值就为偶数
    # 了，问题解决，如果 n+1 为偶数，那么还得加上 n+2 这个奇数，才能让差值为偶数，这样就多
    # 加了两步。分析到这里，我们的解题思路也就明晰了吧：
    def reachNumber(self, target):
        target = abs(target)
        k = 0
        while target > 0:
            k += 1
            target -= k

        return k if target % 2 == 0 else k + 1 + k % 2

if __name__ == '__main__':
    a = ReachaNumber()
    print(a.reachNumber(10))
    print(a.reachNumber(3))
